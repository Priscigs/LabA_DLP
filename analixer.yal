import ply.lex as lex

class YALexRules:
    def __init__(self):
        self.tokens = [
            'NUMBER',
            'PLUS',
            'MINUS',
            'TIMES',
            'DIVIDE',
            'LPAREN',
            'RPAREN',
            'ID'
        ]

    # Define regular expressions for each token
    t_PLUS = r'\+'
    t_MINUS = r'-'
    t_TIMES = r'\*'
    t_DIVIDE = r'/'
    t_LPAREN = r'\('
    t_RPAREN = r'\)'

    # Define how to recognize and convert numbers
    def t_NUMBER(self, t):
        r'\d+'
        t.value = int(t.value)
        return t
    
    # Define how to recognize identifiers
    def t_ID(self, t):
        r'[a-zA-Z_][a-zA-Z_0-9]*'
        return t

    # Define ignored characters (spaces, tabs, newlines)
    t_ignore = ' \t\n'

    # Define error handling
    def t_error(self, t):
        print(f"Illegal character '{t.value[0]}'")
        t.lexer.skip(1)

lexer = lex.lex(module=YALexRules())

def tokenize(text):
    lexer.input(text)
    tokens = []
    while True:
        tok = lexer.token()
        if not tok:
            break
        tokens.append((tok.type, tok.value))
    return tokens

text = "1 + 2 * (3 - 4) hola \n"
tokens = tokenize(text)
print(tokens)
